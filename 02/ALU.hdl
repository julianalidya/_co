// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    CHIP ALU {
    IN  
        x[16], y[16],  
        zx, nx, zy, ny, f, no;

    OUT 
        out[16],
        zr,
        ng;

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=xZeroed);
    Not16(in=xZeroed, out=xNot); 
    Mux16(a=xZeroed, b=xNot, sel=nx, out=xFinal);

    Mux16(a=y, b=false, sel=zy, out=yZeroed); 
    Not16(in=yZeroed, out=yNot); 
    Mux16(a=yZeroed, b=yNot, sel=ny, out=yFinal);

    And16(a=xFinal, b=yFinal, out=andOut); 
    Add16(a=xFinal, b=yFinal, out=addOut); 
    Mux16(a=andOut, b=addOut, sel=f, out=outRaw);

    Not16(in=outRaw, out=outNot); 
    Mux16(a=outRaw, b=outNot, sel=no, out=out);  

    Or(a=out[0], b=out[1], out=or1);
    Or(a=or1, b=out[2], out=or2);
    Or(a=or2, b=out[3], out=or3);
    Or(a=or3, b=out[4], out=or4);
    Or(a=or4, b=out[5], out=or5);
    Or(a=or5, b=out[6], out=or6);
    Or(a=or6, b=out[7], out=or7);

    Or(a=out[8], b=out[9], out=or8);
    Or(a=or8, b=out[10], out=or9);
    Or(a=or9, b=out[11], out=or10);
    Or(a=or10, b=out[12], out=or11);
    Or(a=or11, b=out[13], out=or12);
    Or(a=or12, b=out[14], out=or13);
    Or(a=or13, b=out[15], out=or14);

    Or(a=or7, b=or14, out=anySet);
    Not(in=anySet, out=zr); 

    And(a=out[15], b=true, out=ng); 
}
