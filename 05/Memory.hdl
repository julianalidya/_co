// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // RAM16K: General-purpose memory for addresses 0x0000 to 0x3FFF
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);

    // Screen: Memory-mapped I/O for video output, addresses 0x4000 to 0x5FFF
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);

    // Keyboard: Memory-mapped I/O for user input, address 0x6000
    Keyboard(out=keyboardOut);

    // Address decoding
    // RAM address range: 0x0000 to 0x3FFF (address[14..15] == 00)
    Not(in=address[14], out=notAddress14);
    Not(in=address[15], out=notAddress15);
    And(a=notAddress14, b=notAddress15, out=isRAM);

    // Screen address range: 0x4000 to 0x5FFF (address[14..15] == 01)
    And(a=address[14], b=notAddress15, out=isScreen);

    // Keyboard address: 0x6000 (address[14..15] == 10)
    And(a=notAddress14, b=address[15], out=isKeyboard);

    // Determine load signals
    And(a=load, b=isRAM, out=ramLoad);
    And(a=load, b=isScreen, out=screenLoad);

    // Multiplex the outputs
    Mux16(a=ramOut, b=screenOut, sel=isScreen, out=ramOrScreenOut);
    Mux16(a=ramOrScreenOut, b=keyboardOut, sel=isKeyboard, out=out);
}
